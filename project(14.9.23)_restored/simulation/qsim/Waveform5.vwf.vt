// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/14/2023 17:27:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          game_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module game_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] WallRGB;
reg clk;
reg die;
reg drawing_request_1;
reg drawing_request_2;
reg drawing_request_Axe;
reg drawing_request_Ball;
reg drawing_request_Stonewall;
reg drawing_request_Woodenwall;
reg drawing_request_coin;
reg drawing_request_greenghost;
reg drawing_request_redghost;
reg drawing_request_wall;
reg enter;
reg [1:0] random;
reg resetN;
reg startOfFrame;
reg win;
// wires                                               
wire [3:0] Axe_counter;
wire [1:0] Rand;
wire SingleHitPulse;
wire Stonewall_collision;
wire Woodenwall_collision;
wire coin_collision;
wire collision;
wire collision_greenghost;
wire collision_pac_axe;
wire collision_pac_greenghost;
wire collision_pac_redghost;
wire collision_redghost;
wire [3:0] life_counter;
wire loseDR;
wire reset;
wire [7:0] score;
wire [3:0] sound;
wire startDR;
wire stop;
wire winDR;

// assign statements (if any)                          
game_controller i1 (
// port map - connection between master ports and signals/registers   
	.Axe_counter(Axe_counter),
	.\Rand (Rand),
	.SingleHitPulse(SingleHitPulse),
	.Stonewall_collision(Stonewall_collision),
	.WallRGB(WallRGB),
	.Woodenwall_collision(Woodenwall_collision),
	.clk(clk),
	.coin_collision(coin_collision),
	.collision(collision),
	.collision_greenghost(collision_greenghost),
	.collision_pac_axe(collision_pac_axe),
	.collision_pac_greenghost(collision_pac_greenghost),
	.collision_pac_redghost(collision_pac_redghost),
	.collision_redghost(collision_redghost),
	.die(die),
	.drawing_request_1(drawing_request_1),
	.drawing_request_2(drawing_request_2),
	.drawing_request_Axe(drawing_request_Axe),
	.drawing_request_Ball(drawing_request_Ball),
	.drawing_request_Stonewall(drawing_request_Stonewall),
	.drawing_request_Woodenwall(drawing_request_Woodenwall),
	.drawing_request_coin(drawing_request_coin),
	.drawing_request_greenghost(drawing_request_greenghost),
	.drawing_request_redghost(drawing_request_redghost),
	.drawing_request_wall(drawing_request_wall),
	.enter(enter),
	.life_counter(life_counter),
	.loseDR(loseDR),
	.random(random),
	.reset(reset),
	.resetN(resetN),
	.score(score),
	.sound(sound),
	.startDR(startDR),
	.startOfFrame(startOfFrame),
	.stop(stop),
	.win(win),
	.winDR(winDR)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #30000 1'b1;
end 

// enter
initial
begin
	enter = 1'b0;
	enter = #60000 1'b1;
	enter = #20000 1'b0;
	enter = #300000 1'b1;
	enter = #20000 1'b0;
	enter = #40000 1'b1;
	enter = #20000 1'b0;
	enter = #80000 1'b1;
	enter = #20000 1'b0;
end 

// win
initial
begin
	win = 1'b0;
	win = #320000 1'b1;
	win = #20000 1'b0;
end 

// die
initial
begin
	die = 1'b0;
	die = #480000 1'b1;
	die = #20000 1'b0;
end 

// drawing_request_Ball
initial
begin
	drawing_request_Ball = 1'b0;
	drawing_request_Ball = #100000 1'b1;
	drawing_request_Ball = #20000 1'b0;
	drawing_request_Ball = #30000 1'b1;
	drawing_request_Ball = #20000 1'b0;
	drawing_request_Ball = #30000 1'b1;
	drawing_request_Ball = #20000 1'b0;
	drawing_request_Ball = #30000 1'b1;
	drawing_request_Ball = #20000 1'b0;
end 

// drawing_request_coin
initial
begin
	drawing_request_coin = 1'b0;
	drawing_request_coin = #100000 1'b1;
	drawing_request_coin = #20000 1'b0;
end 

// drawing_request_Axe
initial
begin
	drawing_request_Axe = 1'b0;
	drawing_request_Axe = #150000 1'b1;
	drawing_request_Axe = #20000 1'b0;
end 

// drawing_request_greenghost
initial
begin
	drawing_request_greenghost = 1'b0;
	drawing_request_greenghost = #250000 1'b1;
	drawing_request_greenghost = #20000 1'b0;
end 

// drawing_request_redghost
initial
begin
	drawing_request_redghost = 1'b0;
	drawing_request_redghost = #200000 1'b1;
	drawing_request_redghost = #20000 1'b0;
end 
endmodule

